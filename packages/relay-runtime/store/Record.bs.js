// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Warning = require("warning");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Warning$1 = { };

function isClientID(id) {
  var f = (/^client:/);
  return f.test(id);
}

var id_key = "__id";

var ref_key = "__ref";

var refs_key = "__refs";

var typename_key = "__typename";

var invalidated_at_key = "__invalidated_at";

var frozen_key = "__frozen";

var Keys = {
  fragments_key: "__fragments",
  fragment_owner_key: "__fragmentOwner",
  fragment_prop_name_key: "__fragmentPropName",
  module_component_key: "__module_component",
  id_key: id_key,
  ref_key: ref_key,
  refs_key: refs_key,
  root_id: "client=root",
  root_type: "__Root",
  typename_key: typename_key,
  invalidated_at_key: invalidated_at_key,
  frozen_key: frozen_key
};

function transformValueFromObj(valueObj) {
  var v = typeof valueObj;
  switch (v) {
    case "array" :
        return /* Array */Block.__(7, [$$Array.map(transformValueFromObj, valueObj)]);
    case "boolean" :
        return /* Bool */Block.__(3, [valueObj]);
    case "number" :
        if (Number.isInteger(valueObj)) {
          return /* Int */Block.__(1, [valueObj]);
        } else {
          return /* Float */Block.__(2, [valueObj]);
        }
    case "object" :
        var match = Js_dict.get(valueObj, ref_key);
        var match$1 = Js_dict.get(valueObj, refs_key);
        if (match !== undefined) {
          if (match$1 !== undefined) {
            return /* Custom */Block.__(6, [valueObj]);
          } else {
            return /* Ref */Block.__(4, [match]);
          }
        } else if (match$1 !== undefined) {
          return /* Refs */Block.__(5, [match$1]);
        } else {
          return /* Custom */Block.__(6, [valueObj]);
        }
    case "string" :
        return /* String */Block.__(0, [valueObj]);
    default:
      return Js_exn.raiseTypeError("Unhandled value type: " + (typeof v + (" with value " + JSON.stringify(valueObj))));
  }
}

function transformValueToObj(value) {
  if (typeof value === "number") {
    if (value === /* Null */0) {
      return null;
    } else {
      return ;
    }
  } else {
    switch (value.tag | 0) {
      case /* String */0 :
      case /* Int */1 :
      case /* Float */2 :
      case /* Bool */3 :
          return value[0];
      case /* Ref */4 :
          var obj = { };
          obj[ref_key] = value[0];
          return obj;
      case /* Refs */5 :
          var obj$1 = { };
          obj$1[refs_key] = value[0];
          return obj$1;
      case /* Custom */6 :
          var v = value[0];
          console.log(v);
          console.log("custom element");
          return v;
      case /* Array */7 :
          return $$Array.map(transformValueToObj, value[0]);
      
    }
  }
}

function clone(r) {
  var clone$1 = { };
  $$Array.iter((function (param) {
          var k = param[0];
          if (k !== frozen_key) {
            clone$1[k] = param[1];
            return /* () */0;
          } else {
            return 0;
          }
        }), Js_dict.entries(r));
  return clone$1;
}

function copyFields(a, b) {
  return $$Array.iter((function (param) {
                var k = param[0];
                if (k !== id_key && k !== typename_key) {
                  b[k] = param[1];
                  return /* () */0;
                } else {
                  return 0;
                }
              }), Js_dict.entries(a));
}

function create(dataId, typename) {
  var r = { };
  var id = typeof dataId === "number" ? dataId.toString() : dataId;
  r[id_key] = /* String */Block.__(0, [id]);
  r[typename_key] = /* String */Block.__(0, [typename]);
  return r;
}

function freeze(r) {
  r[frozen_key] = /* Bool */Block.__(3, [true]);
  return /* () */0;
}

function isFrozen(r) {
  var match = Js_dict.get(r, frozen_key);
  if (match !== undefined) {
    var match$1 = match;
    if (typeof match$1 === "number" || match$1.tag !== /* Bool */3) {
      return false;
    } else {
      return match$1[0];
    }
  } else {
    return false;
  }
}

function getDataID(r) {
  var match = Js_dict.get(r, id_key);
  if (match !== undefined) {
    var match$1 = match;
    if (typeof match$1 === "number" || match$1.tag) {
      return "";
    } else {
      return match$1[0];
    }
  } else {
    return "";
  }
}

function getInvalidationEpoch(r) {
  if (r == null) {
    return null;
  } else {
    var invalidated = Js_dict.get(r, invalidated_at_key);
    if (invalidated !== undefined) {
      var match = invalidated;
      if (typeof match === "number" || match.tag !== /* Int */1) {
        return null;
      } else {
        return match[0];
      }
    } else {
      return null;
    }
  }
}

function getLinkedRecordID(r, key) {
  var v = Js_dict.get(r, key);
  if (v !== undefined) {
    var match = v;
    if (typeof match === "number") {
      if (match === /* Null */0) {
        return null;
      } else {
        return Js_exn.raiseError("WRONG");
      }
    } else if (match.tag === /* Ref */4) {
      return match[0];
    } else {
      return Js_exn.raiseError("WRONG");
    }
  }
  
}

function getLinkedRecordIDs(r, key) {
  var v = Js_dict.get(r, key);
  if (v !== undefined) {
    var value = v;
    if (typeof value === "number") {
      if (value === /* Null */0) {
        return null;
      }
      
    } else if (value.tag === /* Refs */5) {
      return value[0];
    }
    var valueFormatted;
    if (typeof value === "number") {
      valueFormatted = value === /* Null */0 ? "null" : "Whatever left";
    } else {
      switch (value.tag | 0) {
        case /* String */0 :
            valueFormatted = value[0];
            break;
        case /* Int */1 :
            valueFormatted = String(value[0]);
            break;
        case /* Float */2 :
            valueFormatted = value[0].toString();
            break;
        case /* Bool */3 :
            valueFormatted = Pervasives.string_of_bool(value[0]);
            break;
        case /* Ref */4 :
            valueFormatted = "ref:" + value[0];
            break;
        default:
          valueFormatted = "Whatever left";
      }
    }
    return Js_exn.raiseError(Curry._3(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "RelayModernRecord.getLinkedRecordIDs(): Expected `",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "." */46,
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* String_literal */Block.__(11, [
                                            "` to contain an array of linked IDs, got `",
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* String_literal */Block.__(11, [
                                                    "`.",
                                                    /* End_of_format */0
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "RelayModernRecord.getLinkedRecordIDs(): Expected `%s.%s` to contain an array of linked IDs, got `%s`."
                      ]), getDataID(r), key, valueFormatted));
  }
  
}

function getType(r) {
  var match = Js_dict.get(r, typename_key);
  if (match !== undefined) {
    var match$1 = match;
    if (typeof match$1 === "number" || match$1.tag) {
      return "";
    } else {
      return match$1[0];
    }
  } else {
    return "";
  }
}

function getValue(r, key) {
  var id = getDataID(r);
  var match = Js_dict.get(r, key);
  if (match !== undefined) {
    var v = match;
    if (typeof v === "number") {
      return transformValueToObj(v);
    } else {
      switch (v.tag | 0) {
        case /* Ref */4 :
            return Js_exn.raiseError(Curry._2(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "RelayModernRecord.getValue(): Expected a scalar (non-link) value for `",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Char_literal */Block.__(12, [
                                            /* "." */46,
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* String_literal */Block.__(11, [
                                                    "` but found a linked record.",
                                                    /* End_of_format */0
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ]),
                                "RelayModernRecord.getValue(): Expected a scalar (non-link) value for `%s.%s` but found a linked record."
                              ]), id, key));
        case /* Refs */5 :
            return Js_exn.raiseError(Curry._2(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "RelayModernRecord.getValue(): Expected a scalar (non-link) value for `",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* Char_literal */Block.__(12, [
                                            /* "." */46,
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* String_literal */Block.__(11, [
                                                    "` but found plural linked records.",
                                                    /* End_of_format */0
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ]),
                                "RelayModernRecord.getValue(): Expected a scalar (non-link) value for `%s.%s` but found plural linked records."
                              ]), id, key));
        default:
          return transformValueToObj(v);
      }
    }
  }
  
}

function update(a, b) {
  var aId = getDataID(a);
  var bId = getDataID(b);
  Warning(aId === bId, "RelayModernRecord: Invalid record update, expected both versions of the record to have the same id, got `%s` and `%s`.", aId, bId);
  var aType = getType(a);
  var bType = getType(b);
  Warning(isClientID(bId) || aType === bType, "RelayModernRecord: Invalid record update, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", bId, typename_key, aType, bType);
  var record = {
    contents: undefined
  };
  $$Array.iter((function (param) {
          var v = param[1];
          var k = param[0];
          if (record.contents !== undefined || Caml_obj.caml_notequal(Js_dict.get(a, k), Js_dict.get(b, k))) {
            var match = record.contents;
            if (match !== undefined) {
              Caml_option.valFromOption(match)[k] = v;
              return /* () */0;
            } else {
              record.contents = Caml_option.some(clone(a));
              var match$1 = record.contents;
              if (match$1 !== undefined) {
                Caml_option.valFromOption(match$1)[k] = v;
                return /* () */0;
              } else {
                throw [
                      Caml_builtin_exceptions.match_failure,
                      /* tuple */[
                        "Record.re",
                        301,
                        17
                      ]
                    ];
              }
            }
          } else {
            return 0;
          }
        }), Js_dict.entries(b));
  var match = record.contents;
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    return a;
  }
}

function merge(a, b) {
  var aId = getDataID(a);
  var bId = getDataID(b);
  Warning(aId === bId, "RelayModernRecord: Invalid record merge, expected both versions of the record to have the same id, got `%s` and `%s`.", aId, bId);
  var aType = getType(a);
  var bType = getType(b);
  Warning(isClientID(bId) || aType === bType, "RelayModernRecord: Invalid record merge, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", bId, typename_key, aType, bType);
  var merged = clone(a);
  $$Array.iter((function (param) {
          merged[param[0]] = param[1];
          return /* () */0;
        }), Js_dict.entries(b));
  return merged;
}

function setValue(r, key, valueObj) {
  var value = null === valueObj ? /* Null */0 : (
      undefined === valueObj || (valueObj == null) ? /* Undefined */1 : transformValueFromObj(valueObj)
    );
  if (typeof value !== "number" && !value.tag) {
    var v = value[0];
    if (key === id_key) {
      var prevId = getDataID(r);
      Warning(prevId === v, "RelayModernRecord: Invalid field update, expected both versions of the record to have the same id, got `%s` and `%s`.", prevId, v);
    } else if (key === typename_key) {
      var prevID = getDataID(r);
      var prevType = getType(r);
      Warning(isClientID(prevID) || prevType === v, "RelayModernRecord: Invalid field update, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", prevID, typename_key, prevType, v);
    }
    
  }
  var match = Js_dict.get(r, frozen_key);
  if (match !== undefined) {
    var match$1 = match;
    if (typeof match$1 !== "number" && match$1.tag === /* Bool */3 && match$1[0]) {
      return Js_exn.raiseTypeError("Record is frozen");
    }
    
  }
  r[key] = value;
  return /* () */0;
}

function setLinkedRecordID(record, key, id) {
  record[key] = /* Ref */Block.__(4, [id]);
  return /* () */0;
}

function setLinkedRecordIDs(record, key, refs) {
  record[key] = /* Refs */Block.__(5, [refs]);
  return /* () */0;
}

function toObj(r) {
  var recordObj = { };
  if (!(r == null)) {
    $$Array.iter((function (param) {
            var k = param[0];
            if (k !== frozen_key) {
              recordObj[k] = transformValueToObj(param[1]);
              return /* () */0;
            } else {
              return 0;
            }
          }), Js_dict.entries(r));
  }
  return recordObj;
}

function fromObj(recordObj) {
  var record = { };
  $$Array.iter((function (param) {
          var v = param[1];
          var k = param[0];
          if (v === null) {
            record[k] = /* Null */0;
            return /* () */0;
          } else if (v == null) {
            record[k] = /* Undefined */1;
            return /* () */0;
          } else {
            record[k] = transformValueFromObj(v);
            return /* () */0;
          }
        }), Js_dict.entries(recordObj));
  return record;
}

var ReasonRecordDict = {
  clone: clone,
  copyFields: copyFields,
  create: create,
  freeze: freeze,
  getDataID: getDataID,
  getInvalidationEpoch: getInvalidationEpoch,
  getLinkedRecordID: getLinkedRecordID,
  getLinkedRecordIDs: getLinkedRecordIDs,
  getType: getType,
  getValue: getValue,
  merge: merge,
  setValue: setValue,
  setLinkedRecordID: setLinkedRecordID,
  setLinkedRecordIDs: setLinkedRecordIDs,
  update: update,
  isFrozen: isFrozen,
  toObj: toObj,
  fromObj: fromObj
};

exports.Warning = Warning$1;
exports.isClientID = isClientID;
exports.Keys = Keys;
exports.transformValueFromObj = transformValueFromObj;
exports.transformValueToObj = transformValueToObj;
exports.ReasonRecordDict = ReasonRecordDict;
/* warning Not a pure module */
